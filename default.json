{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    ":preserveSemverRanges",
    "config:base",
    "docker:enableMajor"
  ],
  "onboarding": false,
  "requireConfig": "optional",
  "repositories": [
    "balena-io-library/base-images",


    "balena-io-modules/abstract-sql-compiler",
    "balena-io-modules/abstract-sql-to-typescript",
    "balena-io-modules/balena-deploy-request",
    "balena-io-modules/balena-env-parsing",
    "balena-io-modules/balena-image-fs",
    "balena-io-modules/drivelist",
    "balena-io-modules/etcher-sdk",
    "balena-io-modules/lf-to-abstract-sql",
    "balena-io-modules/mocha-pod",
    "balena-io-modules/node-beaglebone-usbboot",
    "balena-io-modules/node-ext2fs",
    "balena-io-modules/odata-to-abstract-sql",
    "balena-io-modules/open-balena-base",
    "balena-io-modules/sbvr-parser",
    "balena-io-modules/sbvr-types",
    "balena-io-modules/winusb-driver-generator",


    "balena-io-examples/balena-python-hello-world",


    "balena-io/analytics-backend",
    "balena-io/arm-builder-kernels",
    "balena-io/autohat",
    "balena-io/balena-alertmanager",
    "balena-io/balena-api",
    "balena-io/balena-builder",
    "balena-io/balena-cloud",
    "balena-io/balena-delta",
    "balena-io/balena-git",
    "balena-io/balena-img",
    "balena-io/balena-mdns-publisher",
    "balena-io/balena-metrics-guard-base",
    "balena-io/balena-monitor",
    "balena-io/balena-proxy",
    "balena-io/balena-sentry",
    "balena-io/ca-private",
    "balena-io/cert-manager",
    "balena-io/analytics-pipeline",
    "balena-io/deploy-to-balena-action",
    "balena-io/e2e",
    "balena-io/environment-production",
    "balena-io/environment-staging",
    "balena-io/open-balena-api",
    "balena-io/open-balena-db",
    "balena-io/open-balena-haproxy",
    "balena-io/open-balena-registry-proxy",
    "balena-io/open-balena-registry",
    "balena-io/open-balena-s3",
    "balena-io/open-balena-vpn",
    "balena-io/open-balena",
    "balena-io/pinejs",
    "balena-io/remote-builders",
    "balena-io/remote-workers",
    "balena-io/renovate-config",
    "balena-io/versionist",


    "balena-os/balena-sign",
    "balena-os/cloud-config",
    "balena-os/wifi-connect",


    "balenalabs/proxy-tunnel"
  ],
  "printConfig": true,
  "prHourlyLimit": 0,
  "cloneSubmodules": true,
  "rebaseWhen": "behind-base-branch",
  "git-submodules": {
    "enabled": true
  },
  "labels": ["renovate", "dependencies", "{{depType}}", "{{updateType}}"],
  "prConcurrentLimit": 1,
  "branchConcurrentLimit": 1,
  "packageRules": [
    {
      "matchUpdateTypes": ["major", "minor", "patch"],
      "commitBody": "Update {{depName}} from {{{replace 'v' '' currentVersion}}} to {{{replace 'v' '' newVersion}}}\n\nChange-type: {{updateType}}",
      "labels": ["renovate", "dependencies", "{{depType}}", "{{updateType}}"],
      "automerge": true
    },
    {
      "matchUpdateTypes": ["major"],
      "automerge": false
    },
    {
      "matchUpdateTypes": ["minor"],
      "matchCurrentVersion": "<1.0.0",
      "commitBody": "Update {{depName}} from {{{replace 'v' '' currentVersion}}} to {{{replace 'v' '' newVersion}}}\n\nChange-type: major",
      "labels": ["renovate", "dependencies", "{{depType}}", "major"],
      "automerge": false
    },
    {
      "matchUpdateTypes": ["patch"],
      "matchCurrentVersion": "<1.0.0",
      "commitBody": "Update {{depName}} from {{{replace 'v' '' currentVersion}}} to {{{replace 'v' '' newVersion}}}\n\nChange-type: minor",
      "labels": ["renovate", "dependencies", "{{depType}}", "minor"]
    },
    {
      "matchUpdateTypes": ["digest"],
      "commitBody": "Update {{depName}}\n\nChange-type: patch",
      "automerge": true
    },
    {
      "matchUpdateTypes": ["pin", "pinDigest"],
      "commitBody": "Pin {{depName}}\n\nChange-type: patch",
      "automerge": true
    },
    {
      "automerge": false,
      "matchPackageNames": ["@balena/open-balena-api"],
      "matchUpdateTypes": ["minor"]
    }
  ],
  "regexManagers": [
    {
      "fileMatch": ["(^|\\/).*\\.tf$"],
      "matchStrings": ["arm_builder_kernels_version[= ]\"v?(?<currentValue>.*?)\"\\n"],
      "depNameTemplate": "balena-io/arm-builder-kernels",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": ["(^|\\/).*\\.tf$"],
      "matchStrings": ["gh_runner_image_tag[= ]\"(?<currentValue>.*?)\"\\n"],
      "depNameTemplate": "product-os/self-hosted-runners",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": ["(^|\\/).*\\.tf$"],
      "matchStrings": ["balena_engine_version[= ]\"v?(?<currentValue>.*?)\"\\n"],
      "depNameTemplate": "balena-os/balena-engine",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": ["(^|\\/)Dockerfile(\\.[:alnum:]+)?$"],
      "matchStrings": [
        "ENV PROMETHEUS_VERSION[= ]v?(?<currentValue>.*?)\\n",
        "ARG PROMETHEUS_VERSION[= ]v?(?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "prometheus/prometheus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": ["(^|\\/)Dockerfile(\\.[:alnum:]+)?$"],
      "matchStrings": [
        "ENV GRAFANA_VERSION[= ]v?(?<currentValue>.*?)\\n",
        "ARG GRAFANA_VERSION[= ]v?(?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "grafana/grafana",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.*)$"
    },
    {
      "fileMatch": ["(^|\\/)Dockerfile(\\.[:alnum:]+)?$"],
      "matchStrings": [
        "ENV NODE_VERSION[= ](?<currentValue>.*?)\\n",
        "ARG NODE_VERSION[= ](?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "node",
      "datasourceTemplate": "node"
    },
    {
      "fileMatch": ["(^|\\/)Dockerfile(\\.[[:alnum:]]+)?$"],
      "matchStrings": [
        "ENV NPM_VERSION[= ](?<currentValue>.*?)\\n",
        "ARG NPM_VERSION[= ](?<currentValue>.*?)\\n"
      ],
      "depNameTemplate": "npm",
      "datasourceTemplate": "npm"
    },
    {
      "fileMatch": [
        "(^|\\/)(?:docker-)?compose[^/]*\\.ya?ml$",
        "(^|\\/)Dockerfile(\\.[[:alnum:]]+)?$"
      ],
      "matchStrings": ["(FROM|image:)\\s*(?<depName>.*)(\\/|:)(?<currentValue>.*)\\n"],
      "datasourceTemplate": "docker"
    }
  ]
}
